#!/usr/bin/python3
from tabulate import tabulate
from sys import stdin
import math
import importlib

def modules(s:str) -> dict[str,]:
    return {name: importlib.import_module(name) for name in s.split(',')}

def fmt_or_list(s:str):
    fmts = s.split(',')
    return fmts[0] if len(fmts)==1 else fmts

def colspec(s:str) -> tuple[str,str]:
    (col,code) = s.split('=', maxsplit=1)
    return (col,code)

def parse(s:str):
    try:
        return int(s)
    except ValueError:
        pass  # eww
    try:
        return float(s)
    except ValueError:
        pass  # I hate this
    return s

def update_linevars(vars: dict, line):
    vars['_'] = parse(line.strip())
    chunks=line.strip().split()
    for n in range(0,10):
        vars[f'_{n}'] = parse(chunks[n]) if n < len(chunks) else None
    return vars

def update_columns(col_vals: dict, cols, modules):
    global_vars = vars(math) | {'math':math} | modules
    for (col, code) in cols.items():
        global_vars['init'] = lambda x: col_vals.get(col,x)
        col_vals[col] = eval(code, global_vars, col_vals)
    return col_vals


def table(colspec,modules):
    cols=dict(colspec)
    header=[col for col in cols.keys() if not col.startswith('_')]
    yield header
    col_vals={}
    for line in stdin:
        col_vals = update_linevars(col_vals, line)
        col_vals = update_columns(col_vals, cols,modules)
        yield [col_vals[col] for col in header]


def main(colspec,modules, **args):
    print(tabulate(table(colspec,modules), headers="firstrow", **args))

if __name__ == '__main__':
         from argparse import ArgumentParser
         parser = ArgumentParser(description="Generate a table from a list of python expressions")

         parser.add_argument("colspec", nargs="+", metavar="<name>=<expr>", type=colspec)
         
         parser.add_argument("--float", "-F", dest="floatfmt", type=fmt_or_list,default=[],
                             metavar="format[,format...]",
            help="format specifier for floating point numbers")

         parser.add_argument("--int", "-I", dest="intfmt",type=fmt_or_list,default=[],
                             metavar="format[,format...]",
                             help="format specifier for integers")
         parser.add_argument("--format", "-f", dest="tablefmt", default="simple")
         parser.add_argument("--import", dest="modules", type=modules, default={})
         args = parser.parse_args()
         main(**vars(args))

